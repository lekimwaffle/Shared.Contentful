using System.Collections.Generic;
using System.IO;
using McMaster.Extensions.CommandLineUtils;
using System.Text;
using System.Threading.Tasks;
using Contentful.Core.Models;

namespace Peereflits.Shared.Contentful.ModelsGenerator.Cli;

internal sealed class ContentTypeResolverWriter : ClassGeneratorBase
{
    private const string ClassName = "GeneratedContentTypeResolver";

    private readonly IConsole console;
    private readonly string outputDirectory;
    private readonly string @namespace;
    private readonly bool isInternal;

    private readonly List<ContentType> contentTypes = [];

    public ContentTypeResolverWriter
    (
        IConsole console,
        string outputDirectory,
        string @namespace,
        bool isInternal
    )
    {
        this.console = console;
        this.outputDirectory = outputDirectory;
        this.@namespace = @namespace;
        this.isInternal = isInternal;
    }

    public async Task WriteContentTypeResolver(IEnumerable<ContentType> contentfulTypes)
    {
        contentTypes.AddRange(contentfulTypes);

        var file = Path.Combine(outputDirectory, $"{ClassName}.g.cs");
        console.WriteLine($"Generating file {ClassName}.g.cs");

        await System.IO.File.WriteAllTextAsync(file, GenerateClass().ToString());
    }

    private StringBuilder GenerateClass()
    {
        var sb = new StringBuilder();
        sb.AppendLine("// ===================================================================== //");
        sb.AppendLine("// == This file is generated by the Contentful.ModelsGenerator.Cli    == //");
        sb.AppendLine("// ===================================================================== //");
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using Contentful.Core.Configuration;");
        sb.AppendLine();
        sb.AppendLine($"namespace {@namespace};");
        sb.AppendLine();
        sb.AppendLine("#pragma warning disable CS8669");
        sb.AppendLine();

        sb.AppendLine($"{(isInternal ? "internal" : "public")} partial class {ClassName} : IContentTypeResolver");
        sb.AppendLine("{");
        sb.AppendLine("    private readonly Dictionary<string, Type> types = new Dictionary<string, Type>()");
        sb.AppendLine("    {");

        foreach (var contentType in contentTypes)
        {
            var className = FormatClassName(contentType.SystemProperties.Id);
            sb.AppendLine($"        [{className}.ContentTypeId] = typeof({className}),");
        }

        sb.AppendLine("    };");
        sb.AppendLine();

        sb.AppendLine("    public Type? Resolve(string contentTypeId)");
        sb.AppendLine("    {");
        sb.AppendLine("        return types.TryGetValue(contentTypeId, out var type) ? type : null;");
        sb.AppendLine("    }");

        sb.AppendLine("}");
        sb.AppendLine("#pragma warning restore CS8669");
        sb.AppendLine();

        return sb;
    }
}